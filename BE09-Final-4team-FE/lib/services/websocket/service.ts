import SockJS from 'sockjs-client';
import { Stomp, Frame, Client } from '@stomp/stompjs';
import {
  WebSocketService,
  WebSocketServiceOptions,
  NotificationCallback,
  NotificationMessage
} from './types';

class WebSocketServiceImpl implements WebSocketService {
  private stompClient: Client | null = null;
  private connected = false;
  private subscriptions = new Map<string, any>();
  private options: WebSocketServiceOptions | null = null;
  private reconnectAttempts = 0;
  private reconnectTimer: NodeJS.Timeout | null = null;
  private authToken: string | null = null;

  async connect(options: WebSocketServiceOptions): Promise<void> {
    this.options = options;
    this.authToken = options.token; // ÌÜ†ÌÅ∞ Ï†ÄÏû•
    
    return new Promise((resolve, reject) => {
      try {
        // SockJS Ïó∞Í≤∞ (ÏøºÎ¶¨ ÌååÎùºÎØ∏ÌÑ∞ ÏóÜÏù¥)
        const wsUrl = `${options.gatewayUrl}/ws`;
        console.log('üîó WebSocket URL:', wsUrl);
        
        this.stompClient = Stomp.over(() => new SockJS(wsUrl));

        // ÎîîÎ≤ÑÍ∑∏ Î™®Îìú ÏÑ§Ï†ï (Ìï≠ÏÉÅ ÌôúÏÑ±Ìôî)
        this.stompClient.debug = (str) => {
          console.log('STOMP Debug:', str);
        };

        // STOMP Heartbeat ÏÑ§Ï†ï (30Ï¥à Í∞ÑÍ≤©)
        this.stompClient.heartbeatOutgoing = 30000; // ÌÅ¥ÎùºÏù¥Ïñ∏Ìä∏ ‚Üí ÏÑúÎ≤Ñ
        this.stompClient.heartbeatIncoming = 30000; // ÏÑúÎ≤Ñ ‚Üí ÌÅ¥ÎùºÏù¥Ïñ∏Ìä∏

        // Ïó∞Í≤∞ ÏãúÎèÑ (STOMP Ìó§ÎçîÏóê ÌÜ†ÌÅ∞ Ìè¨Ìï®)
        this.stompClient.connect(
          { 
            'Authorization': `Bearer ${options.token}`,
            'X-Auth-Token': options.token
          },
          (frame: Frame) => {
            this.connected = true;
            this.reconnectAttempts = 0;
            console.log('‚úÖ WebSocket Connected Successfully:', frame);
            console.log('üîë Using Token:', options.token.substring(0, 20) + '...');
            console.log('üåê Gateway URL:', options.gatewayUrl);
            resolve();
          },
          (error: any) => {
            this.connected = false;
            console.error('‚ùå WebSocket Connection Error:', error);
            console.log('üîë Failed Token:', options.token.substring(0, 20) + '...');
            console.log('üåê Failed URL:', options.gatewayUrl);
            this.attemptReconnect();
            reject(error);
          }
        );

        // Ïó∞Í≤∞ Ìï¥Ï†ú Ïù¥Î≤§Ìä∏ Ï≤òÎ¶¨
        this.stompClient.onWebSocketClose = (event) => {
          this.connected = false;
          if (options.debug) {
            console.log('WebSocket Disconnected:', event);
          }
          this.attemptReconnect();
        };

      } catch (error) {
        console.error('WebSocket Setup Error:', error);
        reject(error);
      }
    });
  }

  private attemptReconnect() {
    if (!this.options) return;
    
    const maxAttempts = this.options.maxReconnectAttempts || 15;
    
    if (this.reconnectAttempts < maxAttempts) {
      this.reconnectAttempts++;
      
      // Exponential Backoff + Jitter Í≥ÑÏÇ∞
      const baseDelay = Math.min(1000 * Math.pow(2, this.reconnectAttempts - 1), 30000);
      const jitter = Math.random() * 0.3 * baseDelay; // 0-30% jitter
      const delay = baseDelay + jitter;
      
      if (this.options.debug) {
        console.log(`üîÑ Attempting to reconnect... (${this.reconnectAttempts}/${maxAttempts}) - delay: ${Math.round(delay)}ms`);
      }

      this.reconnectTimer = setTimeout(() => {
        this.connect(this.options!)
          .then(() => {
            console.log(`‚úÖ Reconnected successfully after ${this.reconnectAttempts} attempts`);
            // Ïû¨Ïó∞Í≤∞ ÏÑ±Í≥µ Ïãú Ïπ¥Ïö¥Ìä∏ Ï¥àÍ∏∞Ìôî
            this.reconnectAttempts = 0;
          })
          .catch((error) => {
            console.error(`‚ùå Reconnection attempt ${this.reconnectAttempts} failed:`, error);
          });
      }, delay);
    } else {
      console.error(`üíÄ Max reconnection attempts (${maxAttempts}) reached. Giving up.`);
    }
  }

  disconnect(): void {
    if (this.reconnectTimer) {
      clearTimeout(this.reconnectTimer);
      this.reconnectTimer = null;
    }

    // Î™®Îì† Íµ¨ÎèÖ Ìï¥Ï†ú
    this.subscriptions.forEach((subscription) => {
      subscription.unsubscribe();
    });
    this.subscriptions.clear();

    // STOMP ÌÅ¥ÎùºÏù¥Ïñ∏Ìä∏ Ïó∞Í≤∞ Ìï¥Ï†ú
    if (this.stompClient && this.connected) {
      this.stompClient.disconnect();
    }

    this.connected = false;
    this.stompClient = null;
  }

  isConnected(): boolean {
    return this.connected && this.stompClient !== null;
  }

  subscribeToPersonalNotifications(callback: NotificationCallback): () => void {
    if (!this.stompClient || !this.connected) {
      console.error('‚ùå Personal subscription failed: WebSocket not connected');
      throw new Error('WebSocket is not connected');
    }

    console.log('üîî Subscribing to personal notifications: /user/queue/notifications');
    
    const subscription = this.stompClient.subscribe(
      '/user/queue/notifications',
      (message) => {
        console.log('üì© Personal notification received:', message);
        try {
          const notification: NotificationMessage = {
            ...JSON.parse(message.body),
            channel: 'personal' as const
          };
          console.log('‚úÖ Parsed personal notification:', notification);
          callback(notification);
        } catch (error) {
          console.error('‚ùå Error parsing personal notification:', error);
          console.log('Raw message body:', message.body);
        }
      },
      {
        'Authorization': `Bearer ${this.authToken}`
      }
    );

    this.subscriptions.set('personal', subscription);
    console.log('‚úÖ Personal subscription successful');

    return () => {
      console.log('üîï Unsubscribing from personal notifications');
      subscription.unsubscribe();
      this.subscriptions.delete('personal');
    };
  }

  subscribeToBroadcastNotifications(callback: NotificationCallback): () => void {
    if (!this.stompClient || !this.connected) {
      console.error('‚ùå Broadcast subscription failed: WebSocket not connected');
      throw new Error('WebSocket is not connected');
    }

    console.log('üì¢ Subscribing to broadcast notifications: /topic/announcements');
    
    const subscription = this.stompClient.subscribe(
      '/topic/announcements',
      (message) => {
        console.log('üì© Broadcast notification received:', message);
        try {
          const notification: NotificationMessage = {
            ...JSON.parse(message.body),
            channel: 'broadcast' as const
          };
          console.log('‚úÖ Parsed broadcast notification:', notification);
          callback(notification);
        } catch (error) {
          console.error('‚ùå Error parsing broadcast notification:', error);
          console.log('Raw message body:', message.body);
        }
      },
      {
        'Authorization': `Bearer ${this.authToken}`
      }
    );

    this.subscriptions.set('broadcast', subscription);
    console.log('‚úÖ Broadcast subscription successful');

    return () => {
      console.log('üîï Unsubscribing from broadcast notifications');
      subscription.unsubscribe();
      this.subscriptions.delete('broadcast');
    };
  }

  subscribeToAllNotifications(callback: NotificationCallback): () => void {
    console.log('üöÄ Subscribing to all notification channels');
    
    const unsubscribePersonal = this.subscribeToPersonalNotifications(callback);
    const unsubscribeBroadcast = this.subscribeToBroadcastNotifications(callback);

    console.log('‚úÖ All notification subscriptions completed');
    
    return () => {
      console.log('üõë Unsubscribing from all notification channels');
      unsubscribePersonal();
      unsubscribeBroadcast();
    };
  }
}

// Ïã±Í∏ÄÌÜ§ Ïù∏Ïä§ÌÑ¥Ïä§ ÏÉùÏÑ±
export const webSocketService: WebSocketService = new WebSocketServiceImpl();